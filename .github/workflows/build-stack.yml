name: 1. Build WebSharper Core Stack

on:
  workflow_dispatch:
    inputs:
      stackKind:
        description: 'Select stack kind: all/core/ui/templates/extension names'
        required: false
        default: 'all'
      dotnetVersion:
        description: 'Select .NET SDK version'
        required: false
        default: '6.0.x'
      skipCoreTesting:
        description: 'Skip Core testing'
        required: false
        default: 'false'
      branch:
        description: 'Branch to use for build process'
        required: false
        default: 'master'


jobs:
  build:

    runs-on: windows-latest
    
    env: 
      WSPackageFolder: ../localnuget
      WSVersionsFile: ../versions.txt
      BUILD_NUMBER: ${{ github.run_number }}
      SKIP_CORE_TESTING: ${{ github.event.inputs.skipCoreTesting }}
    
    steps:
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v2.1.1
      with:
        dotnet-version: ${{ github.event.inputs.dotnetVersion }}

    - name: Add GitHub registry NuGet source
      run: 
        dotnet nuget 
          add source https://nuget.pkg.github.com/dotnet-websharper/index.json 
          --name github 
          --username intellifactory-gh 
          --password ${{ secrets.PAT_PACKAGE }} 
          --store-password-in-clear-text
        
    - name: Install Paket as global tool
      run: dotnet tool install paket --global

    - name: Add credentials for Paket
      run:
        paket config
          add-credentials https://nuget.pkg.github.com/dotnet-websharper/index.json
          --username intellifactory-gh 
          --password ${{ secrets.PAT_PACKAGE }}
          
    - name: Configure IntelliFactory CI git user
      run: |
        git config --global user.email "ci@intellifactory.com"
        git config --global user.name "IntelliFactory CI"

    - name: Check out WS Core
      uses: actions/checkout@v3
      if: ${{ success() && (github.event.inputs.stackKind == 'all' || contains(github.event.inputs.stackKind, 'core')) }}
      with:
        repository: dotnet-websharper/core
        ref: ${{ github.event.inputs.branch}}
        path: core
        token: ${{ secrets.PAT_PACKAGE }}
        fetch-depth: 0

    - name: Build WS Core
      if: ${{ success() && (github.event.inputs.stackKind == 'all' || contains(github.event.inputs.stackKind, 'core')) }}
      run: ./build CI-Release
      working-directory: ./core

    - name: Check out WS.UI
      uses: actions/checkout@v3
      if: ${{ success() && (github.event.inputs.stackKind == 'all' || contains(github.event.inputs.stackKind, 'ui')) }}
      with:
        repository: dotnet-websharper/ui
        ref: ${{ github.event.inputs.branch}}
        path: ui
        token: ${{ secrets.PAT_PACKAGE }}
        fetch-depth: 0
        
    - name: Build WS.UI
      if: ${{ success() && (github.event.inputs.stackKind == 'all' || contains(github.event.inputs.stackKind, 'ui')) }}
      run: ./build CI-Release
      working-directory: ./ui

    - name: Check out WS.AspNetCore.WebSocket
      uses: actions/checkout@v3
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'aspnetcore')) }}
      with:
        repository: dotnet-websharper/aspnetcore
        ref: ${{ github.event.inputs.branch}}
        path: aspnetcore
        token: ${{ secrets.PAT_PACKAGE }}
        fetch-depth: 0
        
    - name: Build WS.AspNetCore.WebSocket
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'aspnetcore')) }}
      run: ./build CI-Release
      working-directory: ./aspnetcore

    - name: Check out WS.Templates
      uses: actions/checkout@v3
      if: ${{ success() && (github.event.inputs.stackKind == 'all' || contains(github.event.inputs.stackKind, 'core') || contains(github.event.inputs.stackKind, 'ui') || contains(github.event.inputs.stackKind, 'templates')) }}
      with:
        repository: dotnet-websharper/templates
        ref: ${{ github.event.inputs.branch}}
        path: templates
        token: ${{ secrets.PAT_PACKAGE }}
        fetch-depth: 0
        
    - name: Build WS.Templates
      if: ${{ success() && (github.event.inputs.stackKind == 'all' || contains(github.event.inputs.stackKind, 'core') || contains(github.event.inputs.stackKind, 'ui') || contains(github.event.inputs.stackKind, 'templates')) }}
      run: ./build CI-Release
      working-directory: ./templates

    - name: Check out WS.JQuery
      uses: actions/checkout@v3
      if: ${{ success() && (github.event.inputs.stackKind == 'all' || contains(github.event.inputs.stackKind, 'jquery')) }}
      with:
        repository: dotnet-websharper/jquery
        ref: ${{ github.event.inputs.branch}}
        path: jquery
        token: ${{ secrets.PAT_PACKAGE }}
        fetch-depth: 0

    - name: Build WS.JQuery
      if: ${{ success() && (github.event.inputs.stackKind == 'all' || contains(github.event.inputs.stackKind, 'jquery')) }}
      run: ./build CI-Release
      working-directory: ./jquery

    - name: Check out WS.Forms
      uses: actions/checkout@v3
      if: ${{ success() && (github.event.inputs.stackKind == 'all' || contains(github.event.inputs.stackKind, 'forms')) }}
      with:
        repository: dotnet-websharper/forms
        ref: ${{ github.event.inputs.branch}}
        path: forms
        token: ${{ secrets.PAT_PACKAGE }}
        fetch-depth: 0

    - name: Build WS.Forms
      if: ${{ success() && (github.event.inputs.stackKind == 'all' || contains(github.event.inputs.stackKind, 'forms')) }}
      run: ./build CI-Release
      working-directory: ./forms
      
    - name: Check out WS.MVU
      if: ${{ success() && (github.event.inputs.stackKind == 'all' || contains(github.event.inputs.stackKind, 'mvu')) }}
      uses: actions/checkout@v3
      with:
        repository: dotnet-websharper/mvu
        ref: ${{ github.event.inputs.branch}}
        path: mvu
        token: ${{ secrets.PAT_PACKAGE }}
        fetch-depth: 0
    
    - name: Build WS.MVU
      if: ${{ success() && (github.event.inputs.stackKind == 'all' || contains(github.event.inputs.stackKind, 'mvu')) }}
      run: ./build CI-Release
      working-directory: ./mvu

    - name: Check out WS.Leaflet
      uses: actions/checkout@v3
      if: ${{ success() && (github.event.inputs.stackKind == 'all' || contains(github.event.inputs.stackKind, 'leaflet')) }}
      with:
        repository: dotnet-websharper/leaflet
        ref: ${{ github.event.inputs.branch}}
        path: leaflet
        token: ${{ secrets.PAT_PACKAGE }}
        fetch-depth: 0

    - name: Build WS.Leaflet
      if: ${{ success() && (github.event.inputs.stackKind == 'all' || contains(github.event.inputs.stackKind, 'leaflet')) }}
      run: ./build CI-Release
      working-directory: ./leaflet

    - name: Check out WS.D3
      uses: actions/checkout@v3
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'd3')) }}
      with:
        repository: dotnet-websharper/d3
        ref: ${{ github.event.inputs.branch}}
        path: d3
        token: ${{ secrets.PAT_PACKAGE }}
        fetch-depth: 0

    - name: Build WS.D3
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'd3')) }}
      run: ./build CI-Release
      working-directory: ./d3

    - name: Check out WS.React
      uses: actions/checkout@v3
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'react')) }}
      with:
        repository: dotnet-websharper/react
        ref: ${{ github.event.inputs.branch}}
        path: react
        token: ${{ secrets.PAT_PACKAGE }}
        fetch-depth: 0

    - name: Build WS.React
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'react')) }}
      run: ./build CI-Release
      working-directory: ./react

    - name: Check out WS.SignalR
      uses: actions/checkout@v3
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'signalr')) }}
      with:
        repository: dotnet-websharper/signalr
        ref: ${{ github.event.inputs.branch}}
        path: signalr
        token: ${{ secrets.PAT_PACKAGE }}
        fetch-depth: 0

    - name: Build WS.SignalR
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'signalr')) }}
      run: ./build CI-Release
      working-directory: ./signalr

    - name: Check out WS.DateFNS
      uses: actions/checkout@v3
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'datefns')) }}
      with:
        repository: dotnet-websharper/datefns
        ref: ${{ github.event.inputs.branch}}
        path: datefns
        token: ${{ secrets.PAT_PACKAGE }}
        fetch-depth: 0

    - name: Build WS.DateFNS
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'datefns')) }}
      run: ./build CI-Release
      working-directory: ./datefns

    - name: Check out WS.Moment
      uses: actions/checkout@v3
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'moment')) }}
      with:
        repository: dotnet-websharper/moment
        ref: ${{ github.event.inputs.branch}}
        path: moment
        token: ${{ secrets.PAT_PACKAGE }}
        fetch-depth: 0

    - name: Build WS.Moment
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'moment')) }}
      run: ./build CI-Release
      working-directory: ./moment

    - name: Check out WS.Plotly
      uses: actions/checkout@v3
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'plotly')) }}
      with:
        repository: dotnet-websharper/plotly
        ref: ${{ github.event.inputs.branch}}
        path: plotly
        token: ${{ secrets.PAT_PACKAGE }}
        fetch-depth: 0

    - name: Build WS.Plotly
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'plotly')) }}
      run: ./build CI-Release
      working-directory: ./plotly

    - name: Check out WS.ChartJS
      uses: actions/checkout@v3
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'chartjs')) }}
      with:
        repository: dotnet-websharper/chartjs
        ref: ${{ github.event.inputs.branch}}
        path: chartjs
        token: ${{ secrets.PAT_PACKAGE }}
        fetch-depth: 0

    - name: Build WS.Chartjs
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'chartjs')) }}
      run: ./build CI-Release
      working-directory: ./chartjs

    - name: Check out WS.Charting
      uses: actions/checkout@v3
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'charting')) }}
      with:
        repository: dotnet-websharper/charting
        ref: ${{ github.event.inputs.branch}}
        path: charting
        token: ${{ secrets.PAT_PACKAGE }}
        fetch-depth: 0

    - name: Build WS.Charting
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'charting')) }}
      run: ./build CI-Release
      working-directory: ./charting

    - name: Check out WS.Highcharts
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'highcharts')) }}
      uses: actions/checkout@v3
      with:
        repository: dotnet-websharper/highcharts
        ref: ${{ github.event.inputs.branch}}
        path: highcharts
        token: ${{ secrets.PAT_PACKAGE }}

    - name: Build WS.Highcharts
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'highcharts')) }}
      run: ./build CI-Release
      working-directory: ./highcharts
      
    - name: Check out WS.HighlightJS
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'highlightjs')) }}
      uses: actions/checkout@v3
      with:
        repository: dotnet-websharper/highlightjs
        ref: ${{ github.event.inputs.branch}}
        path: highlightjs
        token: ${{ secrets.PAT_PACKAGE }}

    - name: Build WS.HighlightJS
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'highlightjs')) }}
      run: ./build CI-Release
      working-directory: ./highlightjs

    - name: Check out WS.MathJax
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'mathjax')) }}
      uses: actions/checkout@v3
      with:
        repository: dotnet-websharper/mathjax
        ref: ${{ github.event.inputs.branch}}
        path: mathjax
        token: ${{ secrets.PAT_PACKAGE }}

    - name: Build WS.MathJax
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'mathjax')) }}
      run: ./build CI-Release
      working-directory: ./mathjax

    - name: List packages within ./localnuget
      run: ls ./localnuget

    - name: Publish NuGet packages to GitHub registry
      run:
        dotnet nuget push *.nupkg
          --api-key ${{ secrets.PAT_PACKAGE }}
          --source github
          --skip-duplicate
      working-directory: ./localnuget
      
    - name: Push packages as artifact
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Packages
        path: ./localnuget

    - name: Clean ./localnuget
      uses: JesseTG/rm@v1.0.0
      with:
        path: ./localnuget

    - name: Commit version on WS Core
      if: ${{ success() && (github.event.inputs.stackKind == 'all' || contains(github.event.inputs.stackKind, 'core')) }}
      run: ./build CI-Commit
      working-directory: ./core

    - name: Commit version on WS.UI
      if: ${{ success() && (github.event.inputs.stackKind == 'all' || contains(github.event.inputs.stackKind, 'ui')) }}
      run: ./build CI-Commit
      working-directory: ./ui
      
    - name: Commit version on WS.AspNetCore.WebSocket
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'aspnetcore')) }}
      run: ./build CI-Commit
      working-directory: ./aspnetcore
      
    - name: Commit version on WS.Templates
      if: ${{ success() && (github.event.inputs.stackKind == 'all' || contains(github.event.inputs.stackKind, 'core') || contains(github.event.inputs.stackKind, 'ui') || contains(github.event.inputs.stackKind, 'templates')) }}
      run: ./build CI-Commit
      working-directory: ./templates
    
    - name: Commit version on WS.JQuery
      if: ${{ success() && (github.event.inputs.stackKind == 'all' || contains(github.event.inputs.stackKind, 'jquery')) }}
      run: ./build CI-Commit
      working-directory: ./jquery

    - name: Commit version on WS.Forms
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'forms')) }}
      run: ./build CI-Commit
      working-directory: ./forms

    - name: Commit version on WS.MVU
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'mvu')) }}
      run: ./build CI-Commit
      working-directory: ./mvu

    - name: Commit version on WS.Leaflet
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'leaflet')) }}
      run: ./build CI-Commit
      working-directory: ./leaflet

    - name: Commit version on WS.D3
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'd3')) }}
      run: ./build CI-Commit
      working-directory: ./d3

    - name: Commit version on WS.React
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'react')) }}
      run: ./build CI-Commit
      working-directory: ./react

    - name: Commit version on WS.SignalR
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'signalr')) }}
      run: ./build CI-Commit
      working-directory: ./signalr

    - name: Commit version on WS.DateFNS
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'datefns')) }}
      run: ./build CI-Commit
      working-directory: ./datefns

    - name: Commit version on WS.Moment
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'moment')) }}
      run: ./build CI-Commit
      working-directory: ./moment

    - name: Commit version on WS.Plotly
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'plotly')) }}
      run: ./build CI-Commit
      working-directory: ./plotly

    - name: Commit version on WS.ChartJS
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'chartjs')) }}
      run: ./build CI-Commit
      working-directory: ./chartjs

    - name: Commit version on WS.Charting
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'charting')) }}
      run: ./build CI-Commit
      working-directory: ./charting

    - name: Commit version on WS.Highcharts
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'highcharts')) }}
      run: ./build CI-Commit
      working-directory: ./highcharts

    - name: Commit version on WS.HighlightJS
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'highlightjs')) }}
      run: ./build CI-Commit
      working-directory: ./highlightjs

    - name: Commit version on WS.MathJax
      if: ${{ success() && (github.event.inputs.stackKind =='all' || contains(github.event.inputs.stackKind, 'mathjax')) }}
      run: ./build CI-Commit
      working-directory: ./mathjax
